import { OnChanges, OnInit, EventEmitter, OnDestroy } from '@angular/core';
import { GoogleMapsAPIWrapper } from '@agm/core';
import { InfoWindow } from '@agm/core/services/google-maps-types';
import * as ɵngcc0 from '@angular/core';
export declare class AgmDirection implements OnChanges, OnInit, OnDestroy {
    private gmapsApi;
    origin: any;
    destination: any;
    travelMode: String;
    transitOptions: any;
    drivingOptions: any;
    waypoints: any;
    optimizeWaypoints: Boolean;
    provideRouteAlternatives: Boolean;
    avoidHighways: Boolean;
    avoidTolls: Boolean;
    renderOptions: any;
    panel: object | undefined;
    markerOptions: {
        origin: any;
        destination: any;
        waypoints: any;
    };
    infoWindow: InfoWindow;
    visible: Boolean;
    renderRoute: any;
    onChange: EventEmitter<any>;
    onResponse: EventEmitter<any>;
    sendInfoWindow: EventEmitter<InfoWindow>;
    status: EventEmitter<string>;
    originDrag: EventEmitter<any>;
    destinationDrag: EventEmitter<any>;
    directionsService: any;
    directionsDisplay: any;
    private originMarker;
    private destinationMarker;
    private waypointsMarker;
    private isFirstChange;
    constructor(gmapsApi: GoogleMapsAPIWrapper);
    ngOnInit(): void;
    ngOnChanges(obj: any): void;
    ngOnDestroy(): void;
    /**
     * This event is fired when the user creating or updating this direction
     */
    private directionDraw;
    /**
     * Custom Origin and Destination Icon
     * @param map map
     * @param marker marker
     * @param markerOpts properties
     * @param content marker's infowindow content
     * @returns new marker
     * @memberof AgmDirection
     */
    private setMarker;
    /**
     * This event is fired when remove markers
     */
    private removeMarkers;
    /**
     * This event is fired when remove directions
     */
    private removeDirections;
    /**
     * This event is fired when destroy markers
     */
    private destroyMarkers;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AgmDirection, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<AgmDirection, "agm-direction", never, { "travelMode": "travelMode"; "transitOptions": "transitOptions"; "drivingOptions": "drivingOptions"; "waypoints": "waypoints"; "optimizeWaypoints": "optimizeWaypoints"; "provideRouteAlternatives": "provideRouteAlternatives"; "avoidHighways": "avoidHighways"; "avoidTolls": "avoidTolls"; "visible": "visible"; "renderRoute": "renderRoute"; "origin": "origin"; "destination": "destination"; "infoWindow": "infoWindow"; "renderOptions": "renderOptions"; "panel": "panel"; "markerOptions": "markerOptions"; }, { "onChange": "onChange"; "onResponse": "onResponse"; "sendInfoWindow": "sendInfoWindow"; "status": "status"; "originDrag": "originDrag"; "destinationDrag": "destinationDrag"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdtLWRpcmVjdGlvbi5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsiYWdtLWRpcmVjdGlvbi5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25DaGFuZ2VzLCBPbkluaXQsIEV2ZW50RW1pdHRlciwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBHb29nbGVNYXBzQVBJV3JhcHBlciB9IGZyb20gJ0BhZ20vY29yZSc7XG5pbXBvcnQgeyBJbmZvV2luZG93IH0gZnJvbSAnQGFnbS9jb3JlL3NlcnZpY2VzL2dvb2dsZS1tYXBzLXR5cGVzJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEFnbURpcmVjdGlvbiBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgZ21hcHNBcGk7XG4gICAgb3JpZ2luOiBhbnk7XG4gICAgZGVzdGluYXRpb246IGFueTtcbiAgICB0cmF2ZWxNb2RlOiBTdHJpbmc7XG4gICAgdHJhbnNpdE9wdGlvbnM6IGFueTtcbiAgICBkcml2aW5nT3B0aW9uczogYW55O1xuICAgIHdheXBvaW50czogYW55O1xuICAgIG9wdGltaXplV2F5cG9pbnRzOiBCb29sZWFuO1xuICAgIHByb3ZpZGVSb3V0ZUFsdGVybmF0aXZlczogQm9vbGVhbjtcbiAgICBhdm9pZEhpZ2h3YXlzOiBCb29sZWFuO1xuICAgIGF2b2lkVG9sbHM6IEJvb2xlYW47XG4gICAgcmVuZGVyT3B0aW9uczogYW55O1xuICAgIHBhbmVsOiBvYmplY3QgfCB1bmRlZmluZWQ7XG4gICAgbWFya2VyT3B0aW9uczoge1xuICAgICAgICBvcmlnaW46IGFueTtcbiAgICAgICAgZGVzdGluYXRpb246IGFueTtcbiAgICAgICAgd2F5cG9pbnRzOiBhbnk7XG4gICAgfTtcbiAgICBpbmZvV2luZG93OiBJbmZvV2luZG93O1xuICAgIHZpc2libGU6IEJvb2xlYW47XG4gICAgcmVuZGVyUm91dGU6IGFueTtcbiAgICBvbkNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25SZXNwb25zZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgc2VuZEluZm9XaW5kb3c6IEV2ZW50RW1pdHRlcjxJbmZvV2luZG93PjtcbiAgICBzdGF0dXM6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xuICAgIG9yaWdpbkRyYWc6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGRlc3RpbmF0aW9uRHJhZzogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgZGlyZWN0aW9uc1NlcnZpY2U6IGFueTtcbiAgICBkaXJlY3Rpb25zRGlzcGxheTogYW55O1xuICAgIHByaXZhdGUgb3JpZ2luTWFya2VyO1xuICAgIHByaXZhdGUgZGVzdGluYXRpb25NYXJrZXI7XG4gICAgcHJpdmF0ZSB3YXlwb2ludHNNYXJrZXI7XG4gICAgcHJpdmF0ZSBpc0ZpcnN0Q2hhbmdlO1xuICAgIGNvbnN0cnVjdG9yKGdtYXBzQXBpOiBHb29nbGVNYXBzQVBJV3JhcHBlcik7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhvYmo6IGFueSk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBUaGlzIGV2ZW50IGlzIGZpcmVkIHdoZW4gdGhlIHVzZXIgY3JlYXRpbmcgb3IgdXBkYXRpbmcgdGhpcyBkaXJlY3Rpb25cbiAgICAgKi9cbiAgICBwcml2YXRlIGRpcmVjdGlvbkRyYXc7XG4gICAgLyoqXG4gICAgICogQ3VzdG9tIE9yaWdpbiBhbmQgRGVzdGluYXRpb24gSWNvblxuICAgICAqIEBwYXJhbSBtYXAgbWFwXG4gICAgICogQHBhcmFtIG1hcmtlciBtYXJrZXJcbiAgICAgKiBAcGFyYW0gbWFya2VyT3B0cyBwcm9wZXJ0aWVzXG4gICAgICogQHBhcmFtIGNvbnRlbnQgbWFya2VyJ3MgaW5mb3dpbmRvdyBjb250ZW50XG4gICAgICogQHJldHVybnMgbmV3IG1hcmtlclxuICAgICAqIEBtZW1iZXJvZiBBZ21EaXJlY3Rpb25cbiAgICAgKi9cbiAgICBwcml2YXRlIHNldE1hcmtlcjtcbiAgICAvKipcbiAgICAgKiBUaGlzIGV2ZW50IGlzIGZpcmVkIHdoZW4gcmVtb3ZlIG1hcmtlcnNcbiAgICAgKi9cbiAgICBwcml2YXRlIHJlbW92ZU1hcmtlcnM7XG4gICAgLyoqXG4gICAgICogVGhpcyBldmVudCBpcyBmaXJlZCB3aGVuIHJlbW92ZSBkaXJlY3Rpb25zXG4gICAgICovXG4gICAgcHJpdmF0ZSByZW1vdmVEaXJlY3Rpb25zO1xuICAgIC8qKlxuICAgICAqIFRoaXMgZXZlbnQgaXMgZmlyZWQgd2hlbiBkZXN0cm95IG1hcmtlcnNcbiAgICAgKi9cbiAgICBwcml2YXRlIGRlc3Ryb3lNYXJrZXJzO1xufVxuIl19