import { HttpHeaders } from '@angular/common/http';
import * as ɵngcc0 from '@angular/core';
export declare class ImageLoaderConfigService {
    debugMode: boolean;
    spinnerEnabled: boolean;
    fallbackAsPlaceholder: boolean;
    backgroundSize: string;
    backgroundRepeat: string;
    display: string;
    width: string;
    height: string;
    useImg: boolean;
    fallbackUrl: any;
    concurrency: number;
    maxCacheSize: number;
    maxCacheAge: number;
    imageReturnType: 'base64' | 'uri';
    spinnerName: any;
    spinnerColor: any;
    httpHeaders: HttpHeaders;
    fileNameCachedWithExtension: boolean;
    fallbackFileNameCachedExtension: string;
    cacheDirectoryType: 'cache' | 'data' | 'external';
    private _cacheDirectoryName;
    cacheDirectoryName: string;
    /**
     * Enables debug mode to receive console logs, errors, warnings
     */
    enableDebugMode(): void;
    /**
     * Enable/Disable the spinner by default. Defaults to true.
     * @param enable set to true to enable
     */
    enableSpinner(enable: boolean): void;
    /**
     * Enable/Disable the fallback image as placeholder instead of the spinner. Defaults to false.
     * @param enable set to true to enable
     */
    enableFallbackAsPlaceholder(enable: boolean): void;
    /**
     * Sets the cache directory name. Defaults to 'image-loader-cache'
     * @param name name of directory
     */
    setCacheDirectoryName(name: string): void;
    /**
     * Set default height for images that are not using <img> tag
     * @param height height
     */
    setHeight(height: string): void;
    /**
     * Set default width for images that are not using <img> tag
     * @param width Width
     */
    setWidth(width: string): void;
    /**
     * Enable display mode for images that are not using <img> tag
     * @param display Display mode
     */
    setDisplay(display: string): void;
    /**
     * Use <img> tag by default
     * @param use set to true to use <img> tag by default
     */
    useImageTag(use: boolean): void;
    /**
     * Set default background size for images that are not using <img> tag
     * @param backgroundSize Background size
     */
    setBackgroundSize(backgroundSize: string): void;
    /**
     * Set background repeat for images that are not using <img> tag
     * @param backgroundRepeat Background repeat
     */
    setBackgroundRepeat(backgroundRepeat: string): void;
    /**
     * Set fallback URL to use when image src is undefined or did not resolve.
     * This image will not be cached. This should ideally be a locally saved image.
     * @param fallbackUrl The remote or local URL of the image
     */
    setFallbackUrl(fallbackUrl: string): void;
    /**
     * Set the maximum number of allowed connections at the same time.
     * @param concurrency
     */
    setConcurrency(concurrency: number): void;
    /**
     * Sets the maximum allowed cache size
     * @param cacheSize Cache size in bytes
     */
    setMaximumCacheSize(cacheSize: number): void;
    /**
     * Sets the maximum allowed cache age
     * @param cacheAge Maximum cache age in milliseconds
     */
    setMaximumCacheAge(cacheAge: number): void;
    /**
     * Set the return type of cached images
     * @param imageReturnType The return type; either 'base64' or 'uri'
     */
    setImageReturnType(imageReturnType: 'base64' | 'uri'): void;
    /**
     * Set the default spinner name
     * @param name
     */
    setSpinnerName(name: string): void;
    /**
     * Set the default spinner color
     * @param color
     */
    setSpinnerColor(color: string): void;
    /**
     * Set headers options for the HttpClient transfers.
     * @param headers
     */
    setHttpHeaders(headers: HttpHeaders): void;
    /**
     * Set options for the FileTransfer plugin
     * @param options
     * @deprecated FileTransfer plugin removed.
     */
    setFileTransferOptions(options: {
        trustAllHosts: boolean;
        [key: string]: any;
    }): void;
    /**
     * Enable/Disable the save filename of cached images with extension.  Defaults to false.
     * @param enable set to true to enable
     */
    setFileNameCachedWithExtension(enable: boolean): void;
    /**
     * Set fallback extension filename of cached images.  Defaults to '.jpg'.
     * @param extension fallback extension (e.x .jpg)
     */
    setFallbackFileNameCachedExtension(extension: string): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ImageLoaderConfigService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<ImageLoaderConfigService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2UtbG9hZGVyLWNvbmZpZy5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImltYWdlLWxvYWRlci1jb25maWcuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwSGVhZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEltYWdlTG9hZGVyQ29uZmlnU2VydmljZSB7XG4gICAgZGVidWdNb2RlOiBib29sZWFuO1xuICAgIHNwaW5uZXJFbmFibGVkOiBib29sZWFuO1xuICAgIGZhbGxiYWNrQXNQbGFjZWhvbGRlcjogYm9vbGVhbjtcbiAgICBiYWNrZ3JvdW5kU2l6ZTogc3RyaW5nO1xuICAgIGJhY2tncm91bmRSZXBlYXQ6IHN0cmluZztcbiAgICBkaXNwbGF5OiBzdHJpbmc7XG4gICAgd2lkdGg6IHN0cmluZztcbiAgICBoZWlnaHQ6IHN0cmluZztcbiAgICB1c2VJbWc6IGJvb2xlYW47XG4gICAgZmFsbGJhY2tVcmw6IGFueTtcbiAgICBjb25jdXJyZW5jeTogbnVtYmVyO1xuICAgIG1heENhY2hlU2l6ZTogbnVtYmVyO1xuICAgIG1heENhY2hlQWdlOiBudW1iZXI7XG4gICAgaW1hZ2VSZXR1cm5UeXBlOiAnYmFzZTY0JyB8ICd1cmknO1xuICAgIHNwaW5uZXJOYW1lOiBhbnk7XG4gICAgc3Bpbm5lckNvbG9yOiBhbnk7XG4gICAgaHR0cEhlYWRlcnM6IEh0dHBIZWFkZXJzO1xuICAgIGZpbGVOYW1lQ2FjaGVkV2l0aEV4dGVuc2lvbjogYm9vbGVhbjtcbiAgICBmYWxsYmFja0ZpbGVOYW1lQ2FjaGVkRXh0ZW5zaW9uOiBzdHJpbmc7XG4gICAgY2FjaGVEaXJlY3RvcnlUeXBlOiAnY2FjaGUnIHwgJ2RhdGEnIHwgJ2V4dGVybmFsJztcbiAgICBwcml2YXRlIF9jYWNoZURpcmVjdG9yeU5hbWU7XG4gICAgY2FjaGVEaXJlY3RvcnlOYW1lOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRW5hYmxlcyBkZWJ1ZyBtb2RlIHRvIHJlY2VpdmUgY29uc29sZSBsb2dzLCBlcnJvcnMsIHdhcm5pbmdzXG4gICAgICovXG4gICAgZW5hYmxlRGVidWdNb2RlKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRW5hYmxlL0Rpc2FibGUgdGhlIHNwaW5uZXIgYnkgZGVmYXVsdC4gRGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICAgKiBAcGFyYW0gZW5hYmxlIHNldCB0byB0cnVlIHRvIGVuYWJsZVxuICAgICAqL1xuICAgIGVuYWJsZVNwaW5uZXIoZW5hYmxlOiBib29sZWFuKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBFbmFibGUvRGlzYWJsZSB0aGUgZmFsbGJhY2sgaW1hZ2UgYXMgcGxhY2Vob2xkZXIgaW5zdGVhZCBvZiB0aGUgc3Bpbm5lci4gRGVmYXVsdHMgdG8gZmFsc2UuXG4gICAgICogQHBhcmFtIGVuYWJsZSBzZXQgdG8gdHJ1ZSB0byBlbmFibGVcbiAgICAgKi9cbiAgICBlbmFibGVGYWxsYmFja0FzUGxhY2Vob2xkZXIoZW5hYmxlOiBib29sZWFuKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBjYWNoZSBkaXJlY3RvcnkgbmFtZS4gRGVmYXVsdHMgdG8gJ2ltYWdlLWxvYWRlci1jYWNoZSdcbiAgICAgKiBAcGFyYW0gbmFtZSBuYW1lIG9mIGRpcmVjdG9yeVxuICAgICAqL1xuICAgIHNldENhY2hlRGlyZWN0b3J5TmFtZShuYW1lOiBzdHJpbmcpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFNldCBkZWZhdWx0IGhlaWdodCBmb3IgaW1hZ2VzIHRoYXQgYXJlIG5vdCB1c2luZyA8aW1nPiB0YWdcbiAgICAgKiBAcGFyYW0gaGVpZ2h0IGhlaWdodFxuICAgICAqL1xuICAgIHNldEhlaWdodChoZWlnaHQ6IHN0cmluZyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogU2V0IGRlZmF1bHQgd2lkdGggZm9yIGltYWdlcyB0aGF0IGFyZSBub3QgdXNpbmcgPGltZz4gdGFnXG4gICAgICogQHBhcmFtIHdpZHRoIFdpZHRoXG4gICAgICovXG4gICAgc2V0V2lkdGgod2lkdGg6IHN0cmluZyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRW5hYmxlIGRpc3BsYXkgbW9kZSBmb3IgaW1hZ2VzIHRoYXQgYXJlIG5vdCB1c2luZyA8aW1nPiB0YWdcbiAgICAgKiBAcGFyYW0gZGlzcGxheSBEaXNwbGF5IG1vZGVcbiAgICAgKi9cbiAgICBzZXREaXNwbGF5KGRpc3BsYXk6IHN0cmluZyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogVXNlIDxpbWc+IHRhZyBieSBkZWZhdWx0XG4gICAgICogQHBhcmFtIHVzZSBzZXQgdG8gdHJ1ZSB0byB1c2UgPGltZz4gdGFnIGJ5IGRlZmF1bHRcbiAgICAgKi9cbiAgICB1c2VJbWFnZVRhZyh1c2U6IGJvb2xlYW4pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFNldCBkZWZhdWx0IGJhY2tncm91bmQgc2l6ZSBmb3IgaW1hZ2VzIHRoYXQgYXJlIG5vdCB1c2luZyA8aW1nPiB0YWdcbiAgICAgKiBAcGFyYW0gYmFja2dyb3VuZFNpemUgQmFja2dyb3VuZCBzaXplXG4gICAgICovXG4gICAgc2V0QmFja2dyb3VuZFNpemUoYmFja2dyb3VuZFNpemU6IHN0cmluZyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogU2V0IGJhY2tncm91bmQgcmVwZWF0IGZvciBpbWFnZXMgdGhhdCBhcmUgbm90IHVzaW5nIDxpbWc+IHRhZ1xuICAgICAqIEBwYXJhbSBiYWNrZ3JvdW5kUmVwZWF0IEJhY2tncm91bmQgcmVwZWF0XG4gICAgICovXG4gICAgc2V0QmFja2dyb3VuZFJlcGVhdChiYWNrZ3JvdW5kUmVwZWF0OiBzdHJpbmcpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFNldCBmYWxsYmFjayBVUkwgdG8gdXNlIHdoZW4gaW1hZ2Ugc3JjIGlzIHVuZGVmaW5lZCBvciBkaWQgbm90IHJlc29sdmUuXG4gICAgICogVGhpcyBpbWFnZSB3aWxsIG5vdCBiZSBjYWNoZWQuIFRoaXMgc2hvdWxkIGlkZWFsbHkgYmUgYSBsb2NhbGx5IHNhdmVkIGltYWdlLlxuICAgICAqIEBwYXJhbSBmYWxsYmFja1VybCBUaGUgcmVtb3RlIG9yIGxvY2FsIFVSTCBvZiB0aGUgaW1hZ2VcbiAgICAgKi9cbiAgICBzZXRGYWxsYmFja1VybChmYWxsYmFja1VybDogc3RyaW5nKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIG1heGltdW0gbnVtYmVyIG9mIGFsbG93ZWQgY29ubmVjdGlvbnMgYXQgdGhlIHNhbWUgdGltZS5cbiAgICAgKiBAcGFyYW0gY29uY3VycmVuY3lcbiAgICAgKi9cbiAgICBzZXRDb25jdXJyZW5jeShjb25jdXJyZW5jeTogbnVtYmVyKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBtYXhpbXVtIGFsbG93ZWQgY2FjaGUgc2l6ZVxuICAgICAqIEBwYXJhbSBjYWNoZVNpemUgQ2FjaGUgc2l6ZSBpbiBieXRlc1xuICAgICAqL1xuICAgIHNldE1heGltdW1DYWNoZVNpemUoY2FjaGVTaXplOiBudW1iZXIpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG1heGltdW0gYWxsb3dlZCBjYWNoZSBhZ2VcbiAgICAgKiBAcGFyYW0gY2FjaGVBZ2UgTWF4aW11bSBjYWNoZSBhZ2UgaW4gbWlsbGlzZWNvbmRzXG4gICAgICovXG4gICAgc2V0TWF4aW11bUNhY2hlQWdlKGNhY2hlQWdlOiBudW1iZXIpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgcmV0dXJuIHR5cGUgb2YgY2FjaGVkIGltYWdlc1xuICAgICAqIEBwYXJhbSBpbWFnZVJldHVyblR5cGUgVGhlIHJldHVybiB0eXBlOyBlaXRoZXIgJ2Jhc2U2NCcgb3IgJ3VyaSdcbiAgICAgKi9cbiAgICBzZXRJbWFnZVJldHVyblR5cGUoaW1hZ2VSZXR1cm5UeXBlOiAnYmFzZTY0JyB8ICd1cmknKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGRlZmF1bHQgc3Bpbm5lciBuYW1lXG4gICAgICogQHBhcmFtIG5hbWVcbiAgICAgKi9cbiAgICBzZXRTcGlubmVyTmFtZShuYW1lOiBzdHJpbmcpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgZGVmYXVsdCBzcGlubmVyIGNvbG9yXG4gICAgICogQHBhcmFtIGNvbG9yXG4gICAgICovXG4gICAgc2V0U3Bpbm5lckNvbG9yKGNvbG9yOiBzdHJpbmcpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFNldCBoZWFkZXJzIG9wdGlvbnMgZm9yIHRoZSBIdHRwQ2xpZW50IHRyYW5zZmVycy5cbiAgICAgKiBAcGFyYW0gaGVhZGVyc1xuICAgICAqL1xuICAgIHNldEh0dHBIZWFkZXJzKGhlYWRlcnM6IEh0dHBIZWFkZXJzKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBTZXQgb3B0aW9ucyBmb3IgdGhlIEZpbGVUcmFuc2ZlciBwbHVnaW5cbiAgICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgICAqIEBkZXByZWNhdGVkIEZpbGVUcmFuc2ZlciBwbHVnaW4gcmVtb3ZlZC5cbiAgICAgKi9cbiAgICBzZXRGaWxlVHJhbnNmZXJPcHRpb25zKG9wdGlvbnM6IHtcbiAgICAgICAgdHJ1c3RBbGxIb3N0czogYm9vbGVhbjtcbiAgICAgICAgW2tleTogc3RyaW5nXTogYW55O1xuICAgIH0pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEVuYWJsZS9EaXNhYmxlIHRoZSBzYXZlIGZpbGVuYW1lIG9mIGNhY2hlZCBpbWFnZXMgd2l0aCBleHRlbnNpb24uICBEZWZhdWx0cyB0byBmYWxzZS5cbiAgICAgKiBAcGFyYW0gZW5hYmxlIHNldCB0byB0cnVlIHRvIGVuYWJsZVxuICAgICAqL1xuICAgIHNldEZpbGVOYW1lQ2FjaGVkV2l0aEV4dGVuc2lvbihlbmFibGU6IGJvb2xlYW4pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFNldCBmYWxsYmFjayBleHRlbnNpb24gZmlsZW5hbWUgb2YgY2FjaGVkIGltYWdlcy4gIERlZmF1bHRzIHRvICcuanBnJy5cbiAgICAgKiBAcGFyYW0gZXh0ZW5zaW9uIGZhbGxiYWNrIGV4dGVuc2lvbiAoZS54IC5qcGcpXG4gICAgICovXG4gICAgc2V0RmFsbGJhY2tGaWxlTmFtZUNhY2hlZEV4dGVuc2lvbihleHRlbnNpb246IHN0cmluZyk6IHZvaWQ7XG59XG4iXX0=