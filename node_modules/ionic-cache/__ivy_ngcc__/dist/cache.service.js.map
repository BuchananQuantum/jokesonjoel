{"version":3,"file":"cache.service.js","sources":["../src/cache.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { defer, from, fromEvent, merge, throwError } from 'rxjs';\nimport { share, map, catchError } from 'rxjs/operators';\nimport { CacheStorageService, StorageCacheItem } from './cache-storage';\n\nexport interface CacheConfig {\n  keyPrefix?: string;\n}\n\nexport const MESSAGES = {\n  0: 'Cache initialization error: ',\n  1: 'Cache is not enabled.',\n  2: 'Cache entry already expired: ',\n  3: 'No such key: ',\n  4: 'No entries were deleted, because browser is offline.'\n};\n\nexport type CacheValueFactory<T> = () => Promise<T>;\n\n// @dynamic\n@Injectable()\nexport class CacheService {\n  private ttl: number = 60 * 60; // one hour\n  private cacheEnabled: boolean = true;\n  private invalidateOffline: boolean = false;\n  private networkStatusChanges: Observable<boolean>;\n  private networkStatus: boolean = true;\n  static request: any;\n  static response: any;\n  static responseOptions: any;\n  static httpDeprecated: boolean = false;\n\n  constructor(\n    private _storage: CacheStorageService\n  ) {\n    this.loadHttp();\n    this.watchNetworkInit();\n    this.loadCache();\n  }\n\n  private async loadCache() {\n    try {\n      await this._storage.ready();\n      this.cacheEnabled = true;\n    } catch (e) {\n      this.cacheEnabled = false;\n      console.error(MESSAGES[0], e);\n    }\n  }\n\n  private async loadHttp() {\n    if (CacheService.request && CacheService.response) {\n      return;\n    }\n\n    let http;\n    // try load @angular/http deprecated or @angular/common/http\n    try {\n      http = await import('@angular/http');\n      CacheService.httpDeprecated = true;\n    } catch (e) {\n      http = await import('@angular/common/http');\n    }\n    CacheService.request = http.Request || http.HttpRequest;\n    CacheService.response = http.Response || http.HttpResponse;\n    CacheService.responseOptions = http.ResponseOptions;\n  }\n\n  async ready(): Promise<any> {\n    await this._storage.ready();\n  }\n\n  /**\n   * @description Disable or enable cache\n   */\n  enableCache(enable: boolean = true) {\n    this.cacheEnabled = enable;\n  }\n\n  /**\n   * @description Delete DB table and create new one\n   * @return {Promise<any>}\n   */\n  private async resetDatabase(): Promise<any> {\n    await this.ready();\n\n    let items = await this._storage.all();\n    return Promise.all(\n      items\n      .map(item => this.removeItem(item.key))\n    );\n  }\n\n  /**\n   * @description Set default TTL\n   * @param {number} ttl - TTL in seconds\n   */\n  setDefaultTTL(ttl: number): number {\n    return (this.ttl = ttl);\n  }\n\n  /**\n   * @description Set if expired cache should be invalidated if device is offline\n   * @param {boolean} offlineInvalidate\n   */\n  setOfflineInvalidate(offlineInvalidate: boolean) {\n    this.invalidateOffline = !offlineInvalidate;\n  }\n\n  /**\n   * @description Start watching if devices is online or offline\n   */\n  private watchNetworkInit() {\n    this.networkStatus = navigator.onLine;\n    const connect = fromEvent(window, 'online').pipe(map(() => true)),\n      disconnect = fromEvent(window, 'offline').pipe(map(() => false));\n\n    this.networkStatusChanges = merge(connect, disconnect).pipe(share());\n    this.networkStatusChanges.subscribe(status => {\n      this.networkStatus = status;\n    });\n  }\n\n  /**\n   * @description Stream of network status changes\n   * * @return {Observable<boolean>} network status stream\n   */\n  getNetworkStatusChanges() {\n    return this.networkStatusChanges;\n  }\n\n  /**\n   * @description Check if devices is online\n   * @return {boolean} network status\n   */\n  isOnline() {\n    return this.networkStatus;\n  }\n\n  /**\n   * @description Save item to cache\n   * @param {string} key - Unique key\n   * @param {any} data - Data to store\n   * @param {string} [groupKey] - group key\n   * @param {number} [ttl] - TTL in seconds\n   * @return {Promise<any>} - saved data\n   */\n  saveItem(\n    key: string,\n    data: any,\n    groupKey: string = 'none',\n    ttl: number = this.ttl\n  ): Promise<any> {\n    if (!this.cacheEnabled) {\n      throw new Error(MESSAGES[1]);\n    }\n\n    const expires = new Date().getTime() + ttl * 1000,\n      type = CacheService.isRequest(data) ? 'request' : typeof data,\n      value = JSON.stringify(data);\n\n    return this._storage.set(key, {\n      value,\n      expires,\n      type,\n      groupKey\n    });\n  }\n\n  /**\n   * @description Delete item from cache\n   * @param {string} key - Unique key\n   * @return {Promise<any>} - query execution promise\n   */\n  removeItem(key: string): Promise<any> {\n    if (!this.cacheEnabled) {\n      throw new Error(MESSAGES[1]);\n    }\n\n    return this._storage.remove(key);\n  }\n\n  /**\n   * @description Removes all items with a key that matches pattern\n   * @return {Promise<any>}\n   */\n  async removeItems(pattern: string): Promise<any> {\n    if (!this.cacheEnabled) {\n      throw new Error(MESSAGES[1]);\n    }\n\n    let regex = new RegExp(`^${pattern.split('*').join('.*')}$`);\n    let items = await this._storage.all();\n\n    return Promise.all(\n      items\n      .map(item => item.key)\n      .filter(key => key && regex.test(key))\n      .map(key => this.removeItem(key))\n    );\n  }\n\n  /**\n   * @description Get item from cache without expire check etc.\n   * @param {string} key - Unique key\n   * @return {Promise<any>} - data from cache\n   */\n  async getRawItem<T = any>(key: string): Promise<StorageCacheItem> {\n    if (!this.cacheEnabled) {\n      throw new Error(MESSAGES[1]);\n    }\n\n    try {\n      let data = await this._storage.get(key);\n      if (!!data) {\n        return data;\n      }\n\n      throw new Error('');\n    } catch (err) {\n      throw new Error(MESSAGES[3] + key);\n    }\n  }\n\n  async getRawItems() {\n    return this._storage.all();\n  }\n\n  /**\n   * @description Check if item exists in cache regardless if expired or not\n   * @param {string} key - Unique key\n   * @return {Promise<boolean | string>} - boolean - true if exists\n   */\n  async itemExists(key: string): Promise<boolean | string> {\n    if (!this.cacheEnabled) {\n      throw new Error(MESSAGES[1]);\n    }\n\n    return this._storage.exists(key);\n  }\n\n  /**\n   * @description Get item from cache with expire check and correct type assign\n   * @param {string} key - Unique key\n   * @return {Promise<any>} - data from cache\n   */\n  async getItem<T = any>(key: string): Promise<T> {\n    if (!this.cacheEnabled) {\n      throw new Error(MESSAGES[1]);\n    }\n\n    let data = await this.getRawItem(key);\n\n    if (data.expires < new Date().getTime() && (this.invalidateOffline || this.isOnline())) {\n      throw new Error(MESSAGES[2] + key);\n    }\n\n    return CacheService.decodeRawData(data);\n  }\n\n  async getOrSetItem<T>(\n    key: string,\n    factory: CacheValueFactory<T>,\n    groupKey?: string,\n    ttl?: number\n  ): Promise<T> {\n    let val: T;\n\n    try {\n      val = await this.getItem<T>(key);\n    } catch (error) {\n      val = await factory();\n      await this.saveItem(key, val, groupKey, ttl);\n    }\n\n    return val;\n  }\n\n  /**\n   * @description Decode raw data from DB\n   * @param {any} data - Data\n   * @return {any} - decoded data\n   */\n  static decodeRawData(data: StorageCacheItem): any {\n    let dataJson = JSON.parse(data.value);\n    if (CacheService.isRequest(dataJson)) {\n      let response: any = {\n        body: dataJson._body || dataJson.body,\n        status: dataJson.status,\n        headers: dataJson.headers,\n        statusText: dataJson.statusText,\n        url: dataJson.url\n      };\n\n      if (CacheService.responseOptions) {\n        response.type = dataJson.type;\n        response = new CacheService.responseOptions(response);\n      }\n\n      return new CacheService.response(response);\n    }\n\n    return dataJson;\n  }\n\n  /**\n   * @description Load item from cache if it's in cache or load from origin observable\n   * @param {string} key - Unique key\n   * @param {any} observable - Observable with data\n   * @param {string} [groupKey] - group key\n   * @param {number} [ttl] - TTL in seconds\n   * @return {Observable<any>} - data from cache or origin observable\n   */\n  loadFromObservable<T = any>(\n    key: string,\n    observable: any,\n    groupKey?: string,\n    ttl?: number\n  ): Observable<T> {\n    if (!this.cacheEnabled) return observable;\n\n    observable = observable.pipe(share());\n\n    return defer(() => {\n      return from(this.getItem(key)).pipe(\n        catchError(e => {\n          observable.subscribe(\n            res => {\n              return this.saveItem(key, res, groupKey, ttl);\n            },\n            error => {\n              return throwError(error);\n            }\n          );\n\n          return observable;\n        })\n      );\n    });\n  }\n\n  /**\n   * @description Load item from cache if it's in cache or load from origin observable\n   * @param {string} key - Unique key\n   * @param {any} observable - Observable with data\n   * @param {string} [groupKey] - group key\n   * @param {number} [ttl] - TTL in seconds\n   * @param {string} [delayType='expired']\n   * @param {string} [metaKey] - property on T to which to assign meta data\n   * @return {Observable<any>} - data from cache or origin observable\n   */\n  loadFromDelayedObservable<T = any>(\n    key: string,\n    observable: Observable<T>,\n    groupKey?: string,\n    ttl: number = this.ttl,\n    delayType: string = 'expired',\n    metaKey?: string\n  ): Observable<T> {\n    if (!this.cacheEnabled) return observable;\n\n    const observableSubject = new Subject<T>();\n    observable = observable.pipe(share());\n\n    const subscribeOrigin = () => {\n      observable.subscribe(\n        res => {\n          this.saveItem(key, res, groupKey, ttl);\n          observableSubject.next(res);\n          observableSubject.complete();\n        },\n        err => {\n          observableSubject.error(err);\n        },\n        () => {\n          observableSubject.complete();\n        }\n      );\n    };\n\n    this.getItem<T>(key)\n      .then(data => {\n        if (metaKey) {\n          data[metaKey] = data[metaKey] || {};\n          data[metaKey].fromCache = true;\n        }\n        observableSubject.next(data);\n\n        if (delayType === 'all') {\n          subscribeOrigin();\n        } else {\n          observableSubject.complete();\n        }\n      })\n      .catch(e => {\n        this.getRawItem<T>(key)\n          .then(res => {\n            let result = CacheService.decodeRawData(res);\n            if (metaKey) {\n              result[metaKey] = result[metaKey] || {};\n              result[metaKey].fromCache = true;\n            }\n            observableSubject.next(result);\n            subscribeOrigin();\n          })\n          .catch(() => subscribeOrigin());\n      });\n\n    return observableSubject.asObservable();\n  }\n\n  /**\n   * Perform complete cache clear\n   * @return {Promise<any>}\n   */\n  clearAll(): Promise<any> {\n    if (!this.cacheEnabled) {\n      throw new Error(MESSAGES[2]);\n    }\n\n    return this.resetDatabase();\n  }\n\n  /**\n   * @description Remove all expired items from cache\n   * @param {boolean} ignoreOnlineStatus -\n   * @return {Promise<any>} - query promise\n   */\n  async clearExpired(ignoreOnlineStatus = false): Promise<any> {\n    if (!this.cacheEnabled) {\n      throw new Error(MESSAGES[2]);\n    }\n\n    if (!this.isOnline() && !ignoreOnlineStatus) {\n      throw new Error(MESSAGES[4]);\n    }\n\n    let items = await this._storage.all();\n    let datetime = new Date().getTime();\n\n    return Promise.all(\n      items\n      .filter(item => item.expires < datetime)\n      .map(item => this.removeItem(item.key))\n    );\n  }\n\n  /**\n   * @description Remove all item with specified group\n   * @param {string} groupKey - group key\n   * @return {Promise<any>} - query promise\n   */\n  async clearGroup(groupKey: string): Promise<any> {\n    if (!this.cacheEnabled) {\n      throw new Error(MESSAGES[2]);\n    }\n\n    let items = await this._storage.all();\n\n    return Promise.all(\n      items\n      .filter(item => item.groupKey === groupKey)\n      .map(item => this.removeItem(item.key))\n    );\n  }\n\n  /**\n   * @description Check if it's an request\n   * @param {any} data - Variable to test\n   * @return {boolean} - data from cache\n   */\n  static isRequest(data: any): boolean {\n    let orCondition =\n      data &&\n      typeof data === 'object' &&\n      data.hasOwnProperty('status') &&\n      data.hasOwnProperty('statusText') &&\n      data.hasOwnProperty('headers') &&\n      data.hasOwnProperty('url');\n\n    if (CacheService.httpDeprecated) {\n      orCondition =\n        orCondition &&\n        data.hasOwnProperty('type') &&\n        data.hasOwnProperty('_body');\n    } else {\n      orCondition = orCondition && data.hasOwnProperty('body');\n    }\n\n    return data && ((CacheService.request && data instanceof CacheService.request) || orCondition);\n  }\n}\n"]}